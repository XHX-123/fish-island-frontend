import React, { useState, useEffect, useRef } from 'react';
import { Card } from 'antd';
import classNames from 'classnames';
import styles from './index.less';

interface UpdateItem {
  emoji: string;
  text: string;
}

interface Announcement {
  id: number;
  title: string;
  content: UpdateItem[];
  date: string;
}

const SideAnnouncement: React.FC = () => {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const announcementRef = useRef<HTMLDivElement>(null);
  const [announcements] = useState<Announcement[]>([
    {
      id: 1,
      title: 'V1.2.0 ÁâàÊú¨Êõ¥Êñ∞',
      content: [
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûËÅäÂ§©ÂºïÁî®ÂäüËÉΩ' },
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûËÅäÂ§© @ ÂäüËÉΩ' },
        { emoji: 'üîß', text: '‰øÆÂ§çËæìÂÖ•Ê≥ï‰∏ãÂõûËΩ¶Ëã±ÊñáÁöÑÂºÇÂ∏∏' },
        { emoji: 'üêõ', text: '‰øÆÂ§ç‰∫Ü‰∏Ä‰∫õÂ∑≤Áü•ÈóÆÈ¢ò' },
        { emoji: 'üíÑ', text: 'Êõ¥Êñ∞‰∫ÜÁî®Êà∑Áß∞Âè∑ÂäüËÉΩ' },
      ],
      date: '2025-03-12',
    },
    {
      id: 2,
      title: 'V1.2.1 ÁâàÊú¨Êõ¥Êñ∞',
      content: [
        { emoji: '‚ú®', text: 'Êñ∞Â¢û@Êú∫Âô®‰∫∫ÂäüËÉΩ' },
        { emoji: '‚ú®', text: '‰ºòÂåñÁî®Êà∑ËÅäÂ§©ÂêçÁß∞‰ª•ÂèäËØ¥ËØùÊç¢Ë°å' },
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûÁî®Êà∑Ëá™ÂÆö‰πâÁΩëÁ´ôÂõæÊ†á‰ª•Âèä icon' },
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûÊ∏∏ÊàèÔºàË∑≥‰∏ÄË∑≥ÔºåÊ®°ÊãüËµõËΩ¶Ôºâ' },
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûÊñá‰ª∂‰∏ä‰º†ÂäüËÉΩ' },
      ],
      date: '2025-03-13',
    },{
      id: 3,
      title: 'V1.2.3 ÁâàÊú¨Êõ¥Êñ∞',
      content: [
        { emoji: '‚ú®', text: '‰ºòÂåñ@„ÄÅË°®ÊÉÖÂåÖËá™Âä®Ëé∑ÂèñËæìÂÖ•Ê°ÜÁÑ¶ÁÇπ' },
        { emoji: '‚ú®', text: 'AI Âä©Êâã‰ºòÂåñÊµ∑ÈæüÊ±§ÂäüËÉΩ' },
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûËé∑ÂèñÁî®Êà∑ IP Âú∞ÂùÄÂäüËÉΩ' },
        { emoji: '‚ú®', text: '‰ºòÂåñ‰∏ãÁè≠ÂÄíËÆ°Êó∂ÊåâÈíÆÂèØ‰ª•ÈÄâÊã©ÈöêËóèÊòæÁ§∫' },
      ],
      date: '2025-03-14',
    },{
      id: 4,
      title: 'V1.2.4 ÁâàÊú¨Êõ¥Êñ∞',
      content: [
        { emoji: '‚ú®', text: 'Êñ∞Â¢ûÂÅáÊúüÂÄíËÆ°Êó∂' },
        { emoji: '‚ú®', text: 'ËÅäÂ§©ÂÆ§ÊîØÊåÅ shift + enter Êç¢Ë°å' },
      ],
      date: '2025-03-18',
    }
  ]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        !isCollapsed &&
        announcementRef.current &&
        !announcementRef.current.contains(event.target as Node)
      ) {
        setIsCollapsed(true);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isCollapsed]);

  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div
      ref={announcementRef}
      className={classNames(styles.sideAnnouncement, {
        [styles.collapsed]: isCollapsed,
      })}
    >
      <div className={styles.toggleButton} onClick={toggleCollapse}>
        {isCollapsed ? '‚û°Ô∏è' : '‚¨ÖÔ∏è'}
      </div>
      <Card
        title="Êõ¥Êñ∞ÂÖ¨Âëä"
        className={styles.card}
        bordered={false}
      >
        {announcements.map((announcement) => (
          <div key={announcement.id} className={styles.announcementItem}>
            <div className={styles.header}>
              <h3>{announcement.title}</h3>
              <span className={styles.date}>{announcement.date}</span>
            </div>
            <ul className={styles.updateList}>
              {announcement.content.map((item, index) => (
                <li key={index}>
                  <span className={styles.emoji}>{item.emoji}</span>
                  {item.text}
                </li>
              ))}
            </ul>
          </div>
        ))}
      </Card>
    </div>
  );
};

export default SideAnnouncement;
